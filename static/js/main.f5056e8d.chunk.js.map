{"version":3,"sources":["api/api.ts","redux/chat-reducer.ts","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["api","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessageSentHandler","userTypingHandler","on","sendName","name","emit","sendMessage","message","error","alert","typeMessage","destroyConnection","disconnect","initialState","messages","typingUsers","App","useSelector","state","chat","dispatch","useDispatch","useEffect","fn","type","messagesReceived","newMessageReceived","user","typingUserAdded","isAutoScrollActive","messagesAnchorRef","current","scrollIntoView","behavior","useState","setMessage","setName","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","useRef","className","style","border","padding","height","width","overflowY","onScroll","e","maxScrollPosition","currentTarget","scrollHeight","clientHeight","scrollTop","Math","abs","onScrollFn","map","m","id","u","ref","value","onChange","onClick","setClientName","onKeyPress","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f5056e8d.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\nimport {MessageType, UserType} from '../types/entities'\r\n\r\n\r\nexport const api = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    createConnection() {\r\n        this.socket = io('http://samurai-chat-back.herokuapp.com/')\r\n    },\r\n    subscribe(initMessagesHandler: (messages: Array<MessageType>, fn: () => void) => void,\r\n              newMessageSentHandler: (message: MessageType) => void,\r\n              userTypingHandler: (user: UserType) => void) {\r\n        this.socket?.on('init-messages-published', initMessagesHandler)\r\n        this.socket?.on('new-message-sent', newMessageSentHandler)\r\n        this.socket?.on('user-typing', userTypingHandler)\r\n    },\r\n    sendName(name: string) {\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sendMessage(message: string) {\r\n        this.socket?.emit('client-message-sent', message, (error: string) => {\r\n            if (error) alert(error)\r\n        })\r\n    },\r\n    typeMessage() {\r\n        this.socket?.emit('client-typed')\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null\r\n    }\r\n}","import {api} from '../api/api'\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\r\nimport {MessageType, UserType} from '../types/entities'\r\nimport {AppStateType} from './store'\r\n\r\ntype InitialStateType = {\r\n    messages: Array<MessageType>\r\n    typingUsers: Array<UserType>\r\n}\r\n\r\nconst initialState = {\r\n    messages: [],\r\n    typingUsers: []\r\n}\r\n\r\nexport const chatReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'messages-received': {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case 'new-message-received': {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter((u: UserType) => u.id !== action.message.user.id)\r\n            }\r\n        }\r\n        case 'typingUserAdded': {\r\n            return {\r\n                ...state,\r\n                typingUsers: [...state.typingUsers.filter((u: UserType) => u.id !== action.user.id), action.user]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\ntype ActionsType =\r\n    messagesReceivedActionType\r\n    | newMessageReceivedActionType\r\n    | typingUserAddedActionType\r\n\r\ntype messagesReceivedActionType = {\r\n    type: 'messages-received'\r\n    messages: Array<MessageType>\r\n}\r\ntype newMessageReceivedActionType = {\r\n    type: 'new-message-received'\r\n    message: MessageType\r\n}\r\ntype typingUserAddedActionType = {\r\n    type: 'typingUserAdded'\r\n    user: UserType\r\n}\r\n\r\nconst messagesReceived = (messages: Array<MessageType>): messagesReceivedActionType => ({\r\n    type: 'messages-received',\r\n    messages\r\n})\r\nconst newMessageReceived = (message: MessageType): newMessageReceivedActionType => ({\r\n    type: 'new-message-received',\r\n    message\r\n})\r\nconst typingUserAdded = (user: UserType): typingUserAddedActionType => ({type: 'typingUserAdded', user})\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>;\r\n\r\nexport const createConnection = (): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.createConnection()\r\n    api.subscribe(\r\n        (messages: Array<MessageType>, fn: () => void) => {\r\n            dispatch(messagesReceived(messages))\r\n            fn()\r\n        },\r\n        (message: MessageType) => {\r\n            dispatch(newMessageReceived(message))\r\n        },\r\n        (user: UserType) => {\r\n            dispatch(typingUserAdded(user))\r\n        }\r\n    )\r\n}\r\n\r\nexport const setClientName = (name: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.sendName(name)\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.sendMessage(message)\r\n}\r\n\r\nexport const typeMessage = (): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.typeMessage()\r\n}\r\n\r\nexport const destroyConnection = (): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.destroyConnection()\r\n}\r\n\r\n","import React, {useEffect, useRef, useState} from 'react'\nimport './App.css'\nimport {\n    createConnection,\n    destroyConnection,\n    sendMessage,\n    setClientName,\n    typeMessage\n} from './redux/chat-reducer'\nimport {useSelector, useDispatch} from 'react-redux'\nimport { MessageType, UserType } from './types/entities'\nimport {AppStateType} from './redux/store'\n\n\nfunction App() {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const typingUsers = useSelector((state: AppStateType) => state.chat.typingUsers)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(createConnection())\n        return () => {\n            dispatch(destroyConnection())\n        }\n    }, [])\n    useEffect(() => {\n        if (isAutoScrollActive) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    const [message, setMessage] = useState('test')\n    const [name, setName] = useState('')\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true)\n    const [lastScrollTop, setLastScrollTop] = useState(0)\n\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n    const onScrollFn = (e: React.UIEvent<HTMLDivElement>) => {\n        const maxScrollPosition = e.currentTarget.scrollHeight - e.currentTarget.clientHeight\n        if (e.currentTarget.scrollTop > lastScrollTop\n            && Math.abs(maxScrollPosition - e.currentTarget.scrollTop) < 10) {\n            setIsAutoScrollActive(true)\n        } else {\n            setIsAutoScrollActive(false)\n        }\n        setLastScrollTop(e.currentTarget.scrollTop)\n    }\n\n    return (\n        <div className='App'>\n            <div>\n                <div style={{\n                    border: '1px solid black',\n                    padding: '10px',\n                    height: '300px',\n                    width: '300px',\n                    overflowY: 'scroll'\n                }}\n                     onScroll={(e) => onScrollFn(e)}>\n\n                    {messages.map((m: MessageType) => {\n                        return <div key={m.id}>\n                            <b>{m.user.name}: </b> {m.message}\n                            <hr/>\n                        </div>\n                    })}\n\n                    {typingUsers.map((u: UserType) => {\n                        return <div key={u.id}>\n                            <i>{u.name}: </i> ...\n                        </div>\n                    })}\n\n                    <div ref={messagesAnchorRef}> </div>\n                </div>\n                <div>\n                    <input value={name} onChange={e => setName(e.currentTarget.value)}/>\n                    <button onClick={() => {\n                        dispatch(setClientName(name))\n                    }}>send name\n                    </button>\n                </div>\n                <textarea value={message}\n                          onKeyPress={() => {\n                              dispatch(typeMessage())\n                          }}\n                          onChange={(e) => setMessage(e.currentTarget.value)}>\n                </textarea>\n                <button onClick={() => {\n                    dispatch(sendMessage(message))\n                    setMessage('')\n                }}>send\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {chatReducer} from './chat-reducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({chat: chatReducer})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you wan to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister()\n"],"sourceRoot":""}